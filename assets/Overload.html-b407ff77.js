import{_ as n,o as s,c as a,a as p}from"./app-fdfbac5b.js";const t={},o=p(`<h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>函数重载在项目中经常遇到，在进行重载时，弱类型的js可以只进行部分类型检查，而在ts中，经常由于ts的愚蠢而爆红。不同版本的ts会有不同的结果，为了避免不断的重复令人头疼的重载，可以定义一个<code>overload</code>重载函数自动进行类型重载。</p><h2 id="ts中的类型重载" tabindex="-1"><a class="header-anchor" href="#ts中的类型重载" aria-hidden="true">#</a> ts中的类型重载</h2><p>ts中有三种办法可以进行类型重载</p><h3 id="function类型重载" tabindex="-1"><a class="header-anchor" href="#function类型重载" aria-hidden="true">#</a> <code>function</code>类型重载</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> object<span class="token punctuation">,</span> b<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token operator">|</span>object<span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token operator">|</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种函数重载时，实现函数的参数类型无法被推断，必须显示声明联合类型，而不是保持隐式的<code>any</code>。在某些版本中，只需要声明<code>typeof a === &#39;number&#39;</code>就能够分别函数重载，但某些版本必须对每个入参进行类型断言(不要相信任何一个函数调用者)。</p><h3 id="interface-和-type-函数重载" tabindex="-1"><a class="header-anchor" href="#interface-和-type-函数重载" aria-hidden="true">#</a> <code>interface</code> 和 <code>type</code> 函数重载</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Add</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> object<span class="token punctuation">,</span> b<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Add</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> object<span class="token punctuation">,</span> b<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这一版的函数重载中，通过给变量声明类型，可以在函数实现中省略入参的类型，ts会根据声明的类型自动推断参数的类型，但是在函数实现上依旧严苛。同时这两种类型定义还可以拓展函数，声明函数的属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Add</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> object<span class="token punctuation">,</span> b<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object<span class="token punctuation">;</span> 
  base<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Add</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> object<span class="token punctuation">,</span> b<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
   base<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数重载函数" tabindex="-1"><a class="header-anchor" href="#函数重载函数" aria-hidden="true">#</a> 函数重载函数</h2><p>通过自定义重载函数可以绕过部分严苛的类型检查，在使用者保证入参的情况下，获取更好的编程体验，而不是与ts斗智斗勇。</p><p>在设计上，一个重载函数需要做到两件事：第一件事情，在初始化时注册所有的重载，记录函数类型和函数体；第二件事，在函数调用时区分入参，找到正确的重载函数进行执行，返回其值。</p><h3 id="函数实现" tabindex="-1"><a class="header-anchor" href="#函数实现" aria-hidden="true">#</a> 函数实现</h3><p>所以大致有以下设计</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> OverLoad <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>argu<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  types<span class="token operator">:</span> OverlaodProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> overloadFn<span class="token operator">:</span> <span class="token function-variable function">any</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>argus<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> i <span class="token operator">=</span> argus<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">GetTrueType</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">...</span>argus<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> overloadFn<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  overloadFn<span class="token punctuation">.</span><span class="token function-variable function">default</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;No Function Overload Matched.&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;No Function Overload Matched.&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 动态添加重载函数</span>
  <span class="token keyword">const</span> <span class="token function-variable function">OverLoadAdder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> argus<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> fn<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    overloadFn<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>
    mapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>argus<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">OverLoadAdder</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> types<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span>argus<span class="token punctuation">,</span> types<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  overloadFn<span class="token punctuation">.</span>OverLoadAdder <span class="token operator">=</span> OverLoadAdder<span class="token punctuation">;</span>

  <span class="token keyword">return</span> overloadFn <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> OverloadFn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述函数中，高亮部分为真正的重载函数，根据传入参数的类型，从map缓存中获取函数，然后执行后返回。剩下的部分均为锦上添花。在参数的设计上，采用了如下结构</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">OverlaodProps<span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>argu<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    argus<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数传入了一个对象，属性名为重载函数分支名称，属性值是一个包括了所有重载参数类型的字符串和函数体，即<code>Map&lt;string, Function&gt;</code>键值对。分开书写便于代码的整洁。现在函数已经可以正常工作了，不过遗憾的是，ts并没有办法从输入中读出函数的重载类型，因为入参是运行时，而ts永远处于静态编译时。下一个目标就是让ts获得函数的重载类型。</p><p>根据之前的介绍，很容易得出只需要定义一个<code>type</code>赋值给接受这个函数返回值的变量就行了</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">customFn</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cf<span class="token operator">:</span> customFn <span class="token operator">=</span> <span class="token function">overload</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样类型提示也正常了，cf可以正常使用，<code>overload</code>内部实际上用了<code>as any</code>的断言，所以它不在乎。这样这个函数的问题解决了？ 其实没有，我们不能保证我们在传入参数对象的时候不出错，我们传入的参数可能和函数的重载完全不符，这和我们使用ts背道而驰，使用ts就是为了减少类型错误，我们可以一处小心，但是我们不能处处小心。我们需要对入参进行类型校验，所以有了如下思路</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> overload <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>argu<span class="token operator">:</span> Props<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用泛型约束参数和返回值类型。</p><h3 id="约束参数和返回值" tabindex="-1"><a class="header-anchor" href="#约束参数和返回值" aria-hidden="true">#</a> 约束参数和返回值</h3><p>首先我们可以根据传入的泛型知道每个重载的类型，接着推出其余类型。在现有的函数设计中，我希望重载函数不仅可以使用<code>fn(a, b)</code>调用，还希望能够具名调用其中某一个重载，这个设计可以让函数的实现体在不同的部位出现。于是有 <code>T extends { [key: string]: (...argu: any[]) =&gt; any }</code>传入了对象让每个重载都有名字。 我们首先获取函数重载，先将对象中每个值拿出来再交叉</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UnionFunc<span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>argu<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// 联合转交叉，函数重载是交叉</span>

<span class="token comment">// 同时还需要定义每个分支函数类型 overload.addnumber : (a: number,b: number) =&gt; number</span>
<span class="token keyword">type</span> <span class="token class-name">ExtraAdder<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>argu<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  OverLoadAdder<span class="token operator">:</span> OverLoadAdder<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 用于注册重载的函数</span>
  <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">OverloadFn<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>argu<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token operator">=</span> UnionFunc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> ExtraAdder<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来通过泛型获取定义的传参类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">OverlaodProps<span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>argu<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    argus<span class="token operator">:</span> StringArrayToSingleString<span class="token operator">&lt;</span>
      ParameterArrayToVariableString<span class="token operator">&lt;</span>Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;/&#39;</span>
    <span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 省略 遍历参数数组，转换成字符串，再将字符串使用‘/’拼接</span>
    fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Adder同上, 本质上adder也是函数的一种重载，不过不调用实现方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">OverLoadAdder<span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>argu<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token constant">K</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span>
<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span>
  <span class="token operator">?</span> <span class="token punctuation">(</span>
      k<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span>
      a<span class="token operator">:</span> StringArrayToSingleString<span class="token operator">&lt;</span>
        ParameterArrayToVariableString<span class="token operator">&lt;</span>Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;/&#39;</span>
      <span class="token operator">&gt;</span><span class="token punctuation">,</span>
      fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","Overload.html.vue"]]);export{r as default};
